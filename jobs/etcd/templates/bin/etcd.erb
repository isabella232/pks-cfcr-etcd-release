#!/bin/bash

set -euo pipefail
source /var/vcap/jobs/etcd/bin/utils.sh

# If there is an existing etcd member directory, we can assume that we are an existing
# node in an existing cluster, and start the etcd node with --initial-cluster-state="existing".

if [ -d /var/vcap/store/etcd/member ]; then
  CLUSTER_STATE="existing"
else
  CLUSTER_STATE="new"
fi

/var/vcap/packages/etcd/bin/etcd \
  --name="<%= spec.id %>" \
  --data-dir="/var/vcap/store/etcd" \
  --listen-peer-urls="https://0.0.0.0:2380" \
  --initial-advertise-peer-urls="${etcd_peer_address}" \
  --listen-client-urls="https://0.0.0.0:2379" \
  --advertise-client-urls="${etcd_endpoint_address}" \
  --initial-cluster="${etcd_peers}" \
  --initial-cluster-state="${CLUSTER_STATE}" \
  --client-cert-auth \
  --trusted-ca-file="/var/vcap/jobs/etcd/config/etcd-ca.crt" \
  --cert-file="/var/vcap/jobs/etcd/config/etcd.crt" \
  --key-file="/var/vcap/jobs/etcd/config/etcd.key" \
  --peer-client-cert-auth \
  --peer-trusted-ca-file="/var/vcap/jobs/etcd/config/peer-ca.crt" \
  --peer-cert-file="/var/vcap/jobs/etcd/config/peer.crt" \
  --peer-key-file="/var/vcap/jobs/etcd/config/peer.key" \
<% if_p("etcd.metrics_protocol", "etcd.metrics_port") do |protocol, port| %>  --listen-metrics-urls=<%= protocol %>://0.0.0.0:<%= port %> \<% end %>
